10/12 DAY1
1.0~3.3



1. What is NodeJS?
	브라우저 밖에서 돌아가는 JS
	애초에 JS는 브라우저와 소통하고 싶어서 만들어진 것
	근데 JS가 너무 유명해지고 모든 브라우저에 설치되어 있게 됨
	Ryan이라는 사람이 브라우저에서 JS를 꺼내서 브라우저 밖에서도 사용할수 있게함.
	--> 다른 프로그래밍 언어처럼 사용할 수 있게 됨
	JavaScript로 브라우저 밖에서 서버를 구축하는 등의 코드를 실행할 수 있게 해주는 런타임 환경이다

	이때 프로그램은 리액터 패턴에 의한 CPS(Continuation-Passing Style)로 작성되는데, 이것이 Node.js에 고성능을 선사하는 기법인 동시에 비숙련자에게 디버깅 지옥을 만드는 애증의 관계를 지니고 있다. 궁금하면 위의 간단한 http 서버에서 	createServer가 인자로 전달받은 함수를 http 요청에 이어지는 실행지점으로 사용한다는 점을 보도록 하자. Node.js가 자랑하는 고성능 비동기 프로그램을 작성하기 위해서는 파일시스템을 포함한 프로그램 전체가 비동기화 지점마다 저렇게 CPS로 연결	되어야 한다.

	Socket.IO - Node.js의 비동기 범용 웹소켓 프레임워크
	Express - Node.js 웹 어플리케이션 프레임워크
	Electron - Node.js와 HTML로 작성된 웹 어플리케이션을 데스크톱 어플리케이션으로 만들어주는 Wrapper 프레임워크.



2. npm
	nodeJS package manager.
	nodeJS와 상호작용할 수 있게 해줌
	비슷한 것으로 yarn있음 - 페이스북이 만듦
	터미널에서 node ~~~ 명령어는 많이 쓸일이 없고 거의 npm ~~~ 명령어를 활용함.

	다른 사람들이 만들어놓은 패키지를 가져다 쓰면 개발이 훨씬 편해짐.
	npm으로 이 패키지를 서로 공유할 수 있음. 
	ex) express 패키지는 한달에 수천만명이 다운받음.



3.nodeJS 프로젝트 시작
	what is json? : 프로그래머가 파일에 정보를 저장하기 위해 만든 방식 중 하나
	nodeJS를 사용하는 경우 반드시 package.json이라는 이름으로 만들어야함.
	직접만들필요 없이 npm init 명령어를 통해 쉽게 생성 가능.
	package.json에 있는 "main":"index.js" 라는 것은 이 프로젝트의 대표 파일이 무엇인지 알려주는 것.



4. 파일을 실행하는 방법
	node index.js 처럼 터미널 명령어로 실행 가능.
	하지만 이 방법 사용 안할 것 -> node를 실행하기 전에 다른 작업을 수행하고 싶을 수도 있기 떄문(무슨 얘긴지는 다음 강의에 알게 될거라 함)
	대신 package.json으로 실행시킬 것임.
	package.json에 "scripts"를 추가함. --> "scripts"는 실행하고 싶은 것을 말함.
	  "scripts": {
	    "test": "echo \"Error: no test specified\" && exit 1",
	    "win": "node index.js"
	  },
	이런식으로 실행할 명령어를 넣어줌.
	그 다음 npm run win이라고 명령어를 치면 됨.
	이것이 package.json의 기능중 하나인 "scripts" 사용법!
	나중에는 많은 scripts가 추가될 것. ex)  서버를 시작하는 script, CSS를 압축하는 script, 웹사이트를 빌드하고 서버에 배포하는 script....등



5. 서버 만들기(express 설치, npm)
	npm i express로 express 패키지 설치
	그러면 package-lock.json파일과 node-modules라는 폴더가 생김.
	node-modules 폴더에는 npm i 로 설치한 패키지가 저장될 것임.
	node-modules를 열어보면 express폴더도 있고 그 안에 package.json이 있음. 
	살펴보면 dependencies라는 object가 있는데 express를 사용하려면 필요한 다른 패키지들이 명시되어 있음.
	이 곳에 적혀있는 다른 패키지들도 같이 다운되어서 node-modules폴더에 들어 있을 것임.
	마찬가지로 그 패키지들에도 package.json이 있음. 
	devDependencies라는 것도 있는데 그것은 여기 설치되지 않음( 나중에 설명해준대)
	이렇게 체인처럼 쭉 필요한 패키지를 npm이 알아서 설치해줌(node-modules에 담겨있는 것들)

	설치하고 나면 우리의 package.json에도 dependencies가 생겼을 것임.(express가)-->npm install을 실행할 때는 package.json을 닫고 해야해! (npm이 자동으로 package.json을 수정하기 때문에 열러있으면 오류가 발생할 수 있음)
	이 dependencies 덕분에 위에 다운 받은 폴더와 파일을 삭제하고 다시 설치할 때는 npm i만해도 알아서 필요한 패키지를 설치해줌.
	그렇기 때문에 package.json의 dependencies만 있으면 node-modules폴더를 공유할 필요가 없음!
	그래서 .gitignore에도 node-modules 추가함.

	package-lock.json은 내 패키지를 안전하게 관리해주는 역할
	패키지가 수정되었는지 해시값으로 관리. 버전을 우리가 관리할 필요 없이 알아서 해줌.
	다른 사람에게 프로젝트를 전달할 때 package.json, package-lock.json, index.js만 전달하면 그 사람이 npm i로 패키지들을 설치할 때
	같은 버전의 module을 설치하게 될 것이고 이는 내 코드가 실행될 것을 보장한다는 뜻.



6. babel 사용법
	const express = require("express");
	const app = express(); --> express 어플리케이션을 만든 것!
	기본적으로는 위의 코드로 express를 사용할 수 있게 됨.
	
	bable에 대하여... babel은 JS compiler!
	nodeJS는 우리의 JS code를 이해하겠지만 최신 JS code의 경우 이해 못하기도함.
	그래서 babel을 쓰면 최신 자바스크립트또한 컴파일 해줌. --> nodeJS가 이해할 수 있게 변환해줌.
	npm i --save-dev @babel/core 명령어로 설치하면 package.json에 devDependencies에 추가.
	dependencies는 프로젝트를 진행하기 위해 필요한 패키지. 
	devDependencies는 개발자에게 필요한 dependencies라는 의미지만 dev말고 그냥 dependencies에 추가해도 상관없음. 
	비유하자면 dependencies는 차가 굴러가는데 필요한 연료, devDependencies는 차의 오디오. dependencies는 프로젝트를 위해 필수적 devDependencies는 
	개발자가 쾌적하게 개발하기 위해 필요한 것.
	--save-dev를 추가해야 devDependencis에 기록.
	
	babel.config.json으로 설정파일 만들어주기.
	npm install @babel/preset-env --save-dev
	preset은 babel을 위한 거대한 플러그인
	이 preset을 사용하면 최신 자바스크립트를 사용할 수 있게 해줌.
	
	require("@babel/core").transform("code", {
	  presets: ["@babel/preset-env"],
	}); 이렇게 하면 코드가 변환되어 나옴. --> 직접하고 싶진 않다!! --> package.json에 babel로 컴파일하는 scripts를 만들거야! -->nodemon을 사용 (npm i @babel/node --save-dev)
	package.json scripts에 "dev" : "babel-node index.js"처럼 node 앞에 babel을 추가해서 만들자!
	그리고 나면 위에서 했던 const express = require("express") 대신 최신 코드인 import express from "express";를 사용할 수 있음.
	근데 매번 코드가 수정될때 마다 npm run dev를 해야함 --> 그래서 nodemon사용. nodemon은 우리가 만든 파일이 수정되는걸 감시해주는 패키지. (파일이 수정되면 nodemon이 알아서 재실행해줌)
	"dev" : "nodemon --exec babel-node index.js"처럼 사용가능. --> 이러고 나서 run하면 실행 후 콘솔이 꺼지지 않고 파일이 수정될때마다 알아서 재실행함.



7. NodeJS 서버 만들기!
	서버는 항상 켜져있는 인터넷에 연결된 컴퓨터 같은 것.  그리고 request를 listen중임. request를 받으면 서버는 response함. 클릭하고, 링크를 검색하고 등등 서버와 하는 상호작용 전부 request
	서버가 사람들이 뭔가를 요청할때까지 기다리게 해야함 --> app.listen(callback) --> 서버가 시작될 때 작동하는 함수

	callback함수 만들기 전에. 서버에게 어떤 port를 listening할지 얘기해 줘야함.
	컴퓨터엔 수많은 port가 있고 port는 마치 문이나 창문 같은 존재. 몇몇 port는 인터넷에 오픈되어 있음
	서버가 내 컴퓨터 전체를 listen하고 있을 수 없기 때문에 port를 사용.
	강의에서는 4000번을 사용(일반적으로 높은 숫자는 비어있어서.. 꼭 이 번호일 필요는 없대)
	app.listen(4000, handelListening);
	const handelListening = () => console.log("server listening on port 4000");
	이렇게 서버를 만들고 주소창에 localhost:4000 이라고 입력하면 서버에 접근 가능.


8. Server가 request에 respond하게 만들기 (GET)
	위에 방법대로 만든 서버로 접속해보면 'Cannot GET /' 라고 페이지에 표시됨.
	/ 는 서버의 root. 첫번째 페이지임 ex) google.com/
	GET은 HTTP method ==> 뭔소리?
	http는 우리가 서버와 소통하는 방법(서버끼리 소통하는 방법): 웹사이트에 접속하고 서버에 정보를 보내는 방법 -> 유저가 페이지에 접속하고자 할때 브라우저가 http request를 만들어줌.
	get은 '이 페이지 좀 갖다 줘!'라는 의미와 비슷. 내가 웹사이트로 가는 것이 아니라 브라우저가 request하여 웹페이지를 나한테 불러오는 느낌?
	즉, 브라우저는 지금 / 페이지를 얻어오려고 했지만 실패한 것.
	
	그럼 이제 서버에게 누군가 홈페이지(/)를 get하려 했을 때 어떻게 응답해야하는지 알려줘야할 차례!
		const app = express();
		~~~~ --> 이 사이에서 application 설정을 해야함.(get request에 응답하는 방법 등..)
				여기서 설정이 준비가 되면, application은 listen하기 시작하고 외부에 개방됨.
		app.listen();
	request: 유저가 뭔가를 요청하거나, 보내는 등 나에게 무슨 행동을 한다? 그게 request => 위의 경우 브라우저가 우리 서버의 root로 get request를 보내고 있는 것.
	
	그럼 어떻게 응답하는가?
	app.get("/", callback) => 내 application에 누군가 어떤 route로, 이 경우엔 home(root page /)으로 get request를 보내면 반응할 callback함수를 추가한다는 의미!
	get request에는 route가 있음. (어디로 가려하는지?)
	ex) app.get("/", () => console.log("somebody is trying to go home!"))
		--> 이렇게 하면 console창에 해당 메세지만 뜨고 웹 페이지는 계속 로딩 중임. 왜냐하면 app.get으로 request를 받긴했는데 아무 것도 안하고 아무 응답도 안해주고 있기 때문에
			app.get을 쓰면 브라우저가 특정 route를 불러오는 get request를 보냈을 때 서버가 뭘 해야할지 알려줄 수 있음.
	바닐라JS에서 addEventListener가 함수를 부를 때 event를 줬던 것처럼 express도 app.get에서 object 두개 (req, res)를 줌.(argument가 두개인 것이 중요하지 이름은 중요하지 않음)
	request를 받았으면 response를 return 해야함.
	ex) return res.end(); -> 응답을 끝내는 함수
	    return res.send("LOVE YOU");